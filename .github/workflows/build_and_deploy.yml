name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - production

env:
  PROJECT_ID: travelight-v0 # Google Cloud project id
  GAR_LOCATION: asia-east1 # Artifact Registry location
  BACKEND_REPOSITORY: travelight-backend # Artifact Registry repository name of backend
  BACKEND_SERVICE: spring-boot-backend # Cloud Run service name of backend
  FRONTEND_REPOSITORY: travelight-frontend # Artifact Registry repository name of frontend
  FRONTEND_SERVICE: travelight-frontend # Cloud Run service name of frontend
  REGION: asia-east1 # Cloud Run service region

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: production

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS_V2 }}"

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      # NOTE: Alternative option - authentication via credentials json
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS_V2 }}

      - name: Build and Push Backend Container
        working-directory: backend
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}" . --build-arg SECRET_PASSPHRASE=${{ secrets.SECRET_PASSPHRASE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy Backend to Cloud Run
        id: backend_deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.BACKEND_SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}

      - name: Build and Push Frontend Container
        working-directory: frontend
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}" . \
            --build-arg GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} \
            --build-arg API_ROOT=${{ steps.backend_deploy.outputs.url }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}"

      - name: Deploy Frontend to Cloud Run
        id: frontend_deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.FRONTEND_SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}

      - name: Show Service URLs
        run: |-
          echo "Backend URL: ${{ steps.backend_deploy.outputs.url }}"
          echo "Frontend URL: ${{ steps.frontend_deploy.outputs.url }}"
